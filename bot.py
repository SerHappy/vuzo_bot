import asyncio
import nest_asyncio
import copy
from aiogram import Bot, types, Dispatcher, executor
import sqlite3
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# connection = sqlite3.connect("database.db")
# cursor = connection.cursor()

user_scores = {}
individual_achievements_value = 0
universities = [
    [
        "–ú–ò–†–≠–ê",
        [
            [
                "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢"],
                ],
                267,
                87,
                177600,
            ],
            [
                "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢"],
                ],
                259,
                30,
                177600,
            ],
            [
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢"],
                ],
                243,
                30,
                160000,
            ],
            [
                "–•–∏–º–∏—è",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–•–∏–º–∏—è"],
                ],
                223,
                75,
                192000,
            ],
            [
                "–ù–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–∏–∫—Ä–æ—Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞"],
                ],
                212,
                30,
                219200,
            ],
            [
                "–¢–µ—Ö–Ω–æ—Å—Ñ–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞"],
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–•–∏–º–∏—è"],
                ],
                190,
                19,
                177600,
            ],
        ],
    ],
    [
        "–í–®–≠",
        [
            [
                "–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫"],
                ],
                297,
                110,
                650000,
            ],
            [
                "–ë–∏–æ–ª–æ–≥–∏—è",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è"],
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ë–∏–æ–ª–æ–≥–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"],
                ],
                294,
                50,
                470000,
            ],
            [
                "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢"],
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"],
                ],
                277,
                40,
                450000,
            ],
            [
                "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                [
                    [
                        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                        "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
                        "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫",
                    ],
                ],
                363,
                75,
                480000,
            ],
            [
                "–î–∏–∑–∞–π–Ω",
                [
                    [
                        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
                        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                        "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ",
                    ],
                ],
                292,
                52,
                620000,
            ],
        ],
    ],
    [
        "–ú–ì–£",
        [
            [
                "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è",
                [
                    ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ"],
                ],
                329,
                20,
                435970,
            ],
            [
                "–ë–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è –∏ –±–∏–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                [
                    [
                        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                        "–•–∏–º–∏—è",
                        "–ë–∏–æ–ª–æ–≥–∏—è",
                        "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ",
                    ],
                ],
                476,
                35,
                441440,
            ],
            [
                "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞",
                [
                    [
                        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
                        "–ò—Å—Ç–æ—Ä–∏—è",
                        "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ",
                    ],
                    [
                        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
                        "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫",
                        "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ",
                    ],
                ],
                362,
                170,
                246000,
            ],
        ],
    ],
]
subjects = [
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "–§–∏–∑–∏–∫–∞",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–ë–∏–æ–ª–æ–≥–∏—è",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "–ò—Å—Ç–æ—Ä–∏—è",
    "–•–∏–º–∏—è",
    "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ",
]
qs_world_university_rankings_2022 = [
    [
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º–µ–Ω–∏ –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞",
        78,
        1,
    ],
    [
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        242,
        2,
    ],
    [
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∏–π –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π"
        "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        246,
        3,
    ],
    [
        "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¢–æ–º—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        272,
        4,
    ],
    [
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º. –ù.–≠. –ë–∞—É–º–∞–Ω–∞ (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)",
        285,
        5,
    ],
]
times_higher_education_world_university_rankings_2022 = [
    [
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º–µ–Ω–∏ –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞",
        158,
        1,
    ],
    [
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ñ–∏–∑–∏–∫–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)",
        "201-250",
        2,
    ],
    [
        "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç ¬´–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏¬ª",
        "301-350",
        3,
    ],
    [
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ü–µ—Ç—Ä–∞ –í–µ–ª–∏–∫–æ–≥–æ",
        "301-350",
        3,
    ],
    [
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –≥–æ—Ä–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        "401-500",
        4,
    ],
]
menu_keyboard = (
    types.ReplyKeyboardMarkup(resize_keyboard=True)
    .add(types.KeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª–ª–æ–≤ –ï–ì–≠ üßÆ"))
    .add(types.KeyboardButton("–†–µ–π—Ç–∏–Ω–≥ –≤—É–∑–æ–≤ üîù"))
    .add(types.KeyboardButton("–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é ‚ÑπÔ∏è"))
)
reply_keyboard = (
    types.ReplyKeyboardMarkup(
        resize_keyboard=True,
    )
    .add(types.KeyboardButton("–ó–∞–Ω–æ–≤–æ"))
    .add(types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
)
questions = [
    ["–£—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏.",
        "–û–±—Å–ª—É–∂–∏–≤–∞—Ç—å –º–∞—à–∏–Ω—ã, –ø—Ä–∏–±–æ—Ä—ã (—Å–ª–µ–¥–∏—Ç—å, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å)"],
    ["–ü–æ–º–æ–≥–∞—Ç—å –±–æ–ª—å–Ω—ã–º –ª—é–¥—è–º, –ª–µ—á–∏—Ç—å –∏—Ö.",
        "–°–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã, —Å—Ö–µ–º—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω."],
    ["–°–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–Ω–∏–∂–Ω—ã—Ö –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –ø–ª–∞–∫–∞—Ç–æ–≤, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–æ–∫, –≥—Ä–∞–º–ø–ª–∞—Å—Ç–∏–Ω–æ–∫.",
        "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–π."],
    ["–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–¥–µ—Ä–µ–≤–æ, —Ç–∫–∞–Ω—å, –ø–ª–∞—Å—Ç–º–∞—Å—Å—É –∏ —Ç.–¥.).",
        "–î–æ–≤–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è (—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–∞–≤–∞—Ç—å)."],
    ["–û–±—Å—É–∂–¥–∞—Ç—å –Ω–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏, —Å—Ç–∞—Ç—å–∏.",
        "–û–±—Å—É–∂–¥–∞—Ç—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏."],
    ["–í—ã—Ä–∞—â–∏–≤–∞—Ç—å –º–æ–ª–æ–¥–Ω—è–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∫–∞–∫–æ–π-–ª–∏–±–æ –ø–æ—Ä–æ–¥—ã.",
     "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–µ—Ä—Å—Ç–Ω–∏–∫–æ–≤ (–∏–ª–∏ –º–ª–∞–¥—à–∏—Ö) –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–π (—Ç—Ä—É–¥–æ–≤—ã—Ö, —É—á–µ–±–Ω—ã—Ö, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö)."],
    ["–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å—É–Ω–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.",
     "–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫–∏–º-–ª–∏–±–æ –≥—Ä—É–∑–æ–≤—ã–º, –ø–æ–¥—ä—ë–º–Ω—ã–º, —Ç—Ä–∞–Ω—Å¬¨ –ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º (–ø–æ–¥—ä—ë–º–Ω—ã–º –∫—Ä–∞–Ω–æ–º, –º–∞—à–∏–Ω–æ–π –∏ —Ç.–ø.)."],
    ["–°–æ–æ–±—â–∞—Ç—å, —Ä–∞–∑—ä—è—Å–Ω—è—Ç—å –ª—é–¥—è–º –Ω—É–∂–Ω—ã–µ –¥–ª—è –Ω–∏—Ö —Å–≤–µ–¥–µ–Ω–∏—è –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–º –±—é—Ä–æ, –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏ —Ç.–¥.",
     "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –≤—ã—Å—Ç–∞–≤–∫–∏, –≤–∏—Ç—Ä–∏–Ω—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤, –ø—å–µ—Å –∏ —Ç.–ø."],
    ["–†–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–¥–µ–ª–∏—è, –≤–µ—â–∏ (–æ–¥–µ–∂–¥—É, —Ç–µ—Ö–Ω–∏–∫—É), –∂–∏–ª–∏—â–µ.",
     "–ò—Å–∫–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö, —Ç–∞–±–ª–∏—Ü–∞—Ö, —Ä–∏—Å—É–Ω–∫–∞—Ö."],
    ["–õ–µ—á–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö.",
     "–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞—Å—á—ë—Ç—ã, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."],
    ["–í—ã–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ—Ä—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π.",
     "–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π (–º–∞—à–∏–Ω—ã, –æ–¥–µ–∂–¥—É, –¥–æ–º–∞ –∏ —Ç.–¥.)."],
    ["–†–∞–∑–±–∏—Ä–∞—Ç—å —Å–ø–æ—Ä—ã, —Å—Å–æ—Ä—ã –º–µ–∂–¥—É –ª—é–¥—å–º–∏, —É–±–µ–∂–¥–∞—Ç—å, —Ä–∞–∑—ä—è—Å–Ω—è—Ç—å, –ø–æ–æ—â—Ä—è—Ç—å, –Ω–∞–∫–∞–∑—ã–≤–∞—Ç—å.",
     "–†–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —á–µ—Ä—Ç–µ–∂–∞—Ö, —Å—Ö–µ–º–∞—Ö, —Ç–∞–±–ª–∏—Ü–∞—Ö (–ø—Ä–æ–≤–µ—Ä—è—Ç—å, —É—Ç–æ—á–Ω—è—Ç—å, –ø—Ä–∏–≤–æ–¥–∏—Ç—å –≤ –ø–æ—Ä—è–¥–æ–∫)."],
    ["–ù–∞–±–ª—é–¥–∞—Ç—å, –∏–∑—É—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫—Ä—É–∂–∫–æ–≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∞–º–æ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
     "–ù–∞–±–ª—é–¥–∞—Ç—å, –∏–∑—É—á–∞—Ç—å –∂–∏–∑–Ω—å –º–∏–∫—Ä–æ–±–æ–≤."],
    ["–û–±—Å–ª—É–∂–∏–≤–∞—Ç—å, –Ω–∞–ª–∞–∂–∏–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–±–æ—Ä—ã –∏ –∞–ø–ø–∞—Ä–∞—Ç—ã.",
     "–û–∫–∞–∑—ã–≤–∞—Ç—å –ª—é–¥—è–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å –ø—Ä–∏ —Ä–∞–Ω–µ–Ω–∏—è—Ö, —É—à–∏–±–∞—Ö, –æ–∂–æ–≥–∞—Ö –∏ —Ç.–ø."],
    ["–°–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è, –æ—Ç—á—ë—Ç—ã –æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —è–≤–ª–µ–Ω–∏—è—Ö, —Å–æ–±—ã—Ç–∏—è—Ö, –∏–∑–º–µ—Ä—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –∏ –¥—Ä.",
     "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å, –∏–∑–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º—ã–µ."],
    ["–î–µ–ª–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –≤ –±–æ–ª—å–Ω–∏—Ü–µ.",
     "–ü—Ä–∏–Ω–∏–º–∞—Ç—å, –æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–æ–ª—å–Ω—ã—Ö, –±–µ—Å–µ–¥–æ–≤–∞—Ç—å —Å –Ω–∏–º–∏, –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ª–µ—á–µ–Ω–∏–µ."],
    ["–ö—Ä–∞—Å–∏—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ç–µ–Ω—ã –ø–æ–º–µ—â–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏–π.",
     "–û—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –º–æ–Ω—Ç–∞–∂ –∑–¥–∞–Ω–∏—è –∏–ª–∏ —Å–±–æ—Ä–∫—É –º–∞—à–∏–Ω, –ø—Ä–∏–±–æ—Ä–æ–≤."],
    ["–û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∫—É–ª—å—Ç –ø–æ—Ö–æ–¥—ã –ª—é–¥–µ–π –≤ —Ç–µ–∞—Ç—Ä—ã, –º—É–∑–µ–∏, –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏, –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç.–ø.",
     "–ò–≥—Ä–∞—Ç—å –Ω–∞ —Å—Ü–µ–Ω–µ, –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö."],
    ["–ò–∑–≥–æ—Ç–æ–≤–ª—è—Ç—å –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º –¥–µ—Ç–∞–ª–∏, –∏–∑–¥–µ–ª–∏—è (–º–∞—à–∏–Ω—ã, –æ–¥–µ–∂–¥—É), —Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏—è.",
     "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —á–µ—Ä—á–µ–Ω–∏–µ–º, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã, —á–µ—Ä—Ç–µ–∂–∏."],
    ["–í–µ—Å—Ç–∏ –±–æ—Ä—å–±—É —Å –±–æ–ª–µ–∑–Ω—è–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π, —Å –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏ –ª–µ—Å–∞, —Å–∞–¥–∞.",
     "–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–∞—à–∏–Ω–∞—Ö (–ø–∏—à—É—â–∞—è –º–∞—à–∏–Ω–∞, –∫–æ–º–ø—å—é—Ç–µ—Ä, —Ç–µ–ª–µ—Ç–∞–π–ø, —Ç–µ–ª–µ—Ñ–∞–∫—Å)."],
]
answers = {
    "Nature": 0,
    "Technics": 0,
    "Human": 0,
    "Sign System": 0,
    "Artistic Image": 0,
}


class SubjectScoreForm(StatesGroup):
    amount = State()
    subject = State()
    score = State()
    individual_achievements = State()
    search = State()


class RatingForm(StatesGroup):
    rating = State()


class TestForm(StatesGroup):
    answer1_wait = State()
    answer2_wait = State()
    answer3_wait = State()
    answer4_wait = State()
    answer5_wait = State()
    answer6_wait = State()
    answer7_wait = State()
    answer8_wait = State()
    answer9_wait = State()
    answer10_wait = State()
    answer11_wait = State()
    answer12_wait = State()
    answer13_wait = State()
    answer14_wait = State()
    answer15_wait = State()
    answer16_wait = State()
    answer17_wait = State()
    answer18_wait = State()
    answer19_wait = State()
    answer20_wait = State()
    result = State()


async def set_commands(bot: Bot) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ —á–∞—Ç–µ –ø—Ä–∏ –≤–≤–æ–¥–µ '/'"""
    commands = [
        types.BotCommand(command="/start",
                         description="–ü—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        types.BotCommand(command="/menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/ege", description="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª–ª–æ–≤ –ï–ì–≠"),
        types.BotCommand(command="/rating", description="–†–µ–π—Ç–∏–Ω–≥ –≤—É–∑–æ–≤"),
        types.BotCommand(
            command="/test", description="–¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±—É–¥—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
        ),
    ]
    await bot.set_my_commands(commands)


def auth(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä"""

    async def wrapper(message):
        if message["from"]["id"] != 420041096:
            return await message.reply("Access Denied", reply=False)
        return await func(message)

    return wrapper


@auth
async def send_welcome_message(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ–º –≤ –º–∏—Ä –≤—É–∑–æ–≤.\n–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏—â–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã—Å—à–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –º–µ—Å—Ç–æ–º, –≥–¥–µ —Ç—ã –ø—Ä–æ–≤–µ–¥—ë—à—å –±–ª–∏–∂–∞–π—à–∏–µ 4 –≥–æ–¥–∞. –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–±—â–µ–∂–∏—Ç–∏–π –¥–æ –ø—Ä–æ—Ö–æ–¥–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–±—Ä–∞–≤ /menu, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–∏–∂–µ, –∏ —Å–∫–æ—Ä–µ–µ –±–µ—Ä–∏ –∫—É—Ä—Å –Ω–∞ –≤—É–∑!",
        reply_markup=menu_keyboard,
    )


async def main_menu(message: types.Message, state=FSMContext) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –ø—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/ege - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª–ª–æ–≤ –ï–ì–≠\n"
        "/rating - –†–µ–π—Ç–∏–Ω–≥ –≤—É–∑–æ–≤\n"
        "/test - –¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±—É–¥—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏\n"
        "–¢–∞–∫ –∂–µ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π :)"
        "\nPS: –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∏–Ω–∞—é—Ç –Ω–æ–≤–æ–µ, —Ç–∞–∫ —á—Ç–æ –±—É—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –ø—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!",
        reply_markup=menu_keyboard,
    )


async def start_FSM_for_subject(message: types.Message, state=FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ï–ì–≠"""
    # cursor.execute(f"SELECT id FROM user WHERE user_id = {int(message.from_user.id)}")
    # user_id = cursor.fetchall()[0][0]
    # connection.execute("PRAGMA foreign_keys = ON")
    # cursor.execute("DELETE FROM subjects WHERE user_id = (?)", (user_id,))
    # connection.commit()
    user_scores.clear()
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await SubjectScoreForm.amount.set()
    await message.answer(
        "–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–¥–∞–≤–∞–ª/–ª–∞:",
        reply_markup=types.ReplyKeyboardRemove(),
    )


async def process_amount_invalid(message: types.Message) -> None:
    """–ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ"""
    await message.answer(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 3 –¥–æ {len(subjects)}\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
    )


async def process_amount(message: types.Message, state=FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    async with state.proxy() as data:
        if await state.get_state() == "SubjectScoreForm:amount":
            data["amount"] = int(message.text)
    subject_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        *subjects,
        "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üîô",
    ]
    subject_keyboard.add(*buttons)
    await SubjectScoreForm.subject.set()
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–¥–∞–≤–∞–ª:", reply_markup=subject_keyboard
    )


async def process_subject_invalid(message: types.Message) -> None:
    """–ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ"""
    return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞!\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")


async def process_subject(message: types.Message, state=FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –±–∞–ª–ª–æ–≤"""
    async with state.proxy() as data:
        data["subject"] = message.text
    await SubjectScoreForm.score.set()
    await message.answer(
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–µ–¥–º–µ—Ç {message.text}: ",
        reply_markup=types.ReplyKeyboardRemove(),
    )


async def process_score_invalid(message: types.Message) -> None:
    """–ï—Å–ª–∏ –±–∞–ª–ª—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ"""
    return await message.reply(
        "–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100!\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
    )


async def process_score(message: types.Message, state=FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–µ–¥–º–µ—Ç"""
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ –ª–æ–∫. —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–º subject
    async with state.proxy() as data:
        data["score"] = int(message.text)
    # cursor.execute(f"SELECT id FROM user WHERE user_id = {int(message.from_user.id)}")
    # user_id = cursor.fetchall()[0][0]
    # cursor.execute(
    #     "INSERT INTO subjects (name, score, user_id) VALUES (?, ?, ?)",
    #     (data["subject"], data["score"], user_id),
    # )
    # cursor.execute(f"SELECT MAX(id) FROM subjects")
    # subject_id = cursor.fetchall()[0][0]
    # cursor.execute(
    #     "INSERT INTO user_subjects (user_id, subject_id) VALUES (?, ?)",
    #     (user_id, subject_id),
    # )
    # connection.commit()
    user_scores[data["subject"]] = data["score"]
    if len(user_scores) < data["amount"]:
        await SubjectScoreForm.subject.set()
        await process_amount(message, state=state)
    else:
        keyboard = copy.deepcopy(reply_keyboard)
        if "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" in user_scores and "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫" in user_scores:
            keyboard.add(types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
            answer = f"–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–±–æ—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤!"
        else:
            await state.finish()
            answer = f"–í—ã –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã –∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫)"
        await message.answer(answer, reply_markup=keyboard)


async def process_id_start(message: types.Message, state=FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤"""
    async with state.proxy() as data:
        data["amount"] = data["amount"]
    if (
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" in user_scores and "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫" in user_scores and len(
            user_scores) == data["amount"]):
        await SubjectScoreForm.next()
        await message.answer(
            f"–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –¥–æ–ø. –±–∞–ª–ª–æ–≤ (–≤–≤–µ–¥–∏ 0, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç): ",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    else:
        await empty(message)


async def process_id_invalid(message: types.Message) -> None:
    """–ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ"""
    return await message.reply(
        "–î–æ–ø. –±–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 10!\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: "
    )


async def process_id(message: types.Message, state=FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã"""
    async with state.proxy() as data:
        data["individual_achievements_value"] = int(message.text)
    # cursor.execute(
    #     "UPDATE user SET individual_achievements_value = (?) WHERE user_id = (?)",
    #     (
    #         data["individual_achievements_value"],
    #         message.from_user.id,
    #     ),
    # )
    # connection.commit()
    global individual_achievements_value
    individual_achievements_value = data["individual_achievements_value"]
    await state.finish()
    answer = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {individual_achievements_value} –±–∞–ª–ª–æ–≤!"
    await message.answer(answer)
    answer = f"–¢–µ–∫—É—â–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(user_scores)}\n"
    total_score = 0
    for subject, score in user_scores.items():
        answer += f"–ü—Ä–µ–¥–º–µ—Ç '{subject}', –±–∞–ª–ª–æ–≤ - {score}\n"
        total_score += score
    if individual_achievements_value > 0:
        answer += f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø. –±–∞–ª–ª–æ–≤ - {individual_achievements_value}"
    answer += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ —Ä–∞–≤–Ω–∞: {total_score+individual_achievements_value}"
    keyboard = copy.deepcopy(reply_keyboard)
    keyboard.add(types.KeyboardButton("–ü–æ–¥–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"))
    await SubjectScoreForm.search.set()
    await message.answer(answer, reply_markup=keyboard)


async def process_search_start(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"""
    # cursor.execute(
    #     "SELECT subjects_list_id, speciality.id, speciality.name, subject_name FROM speciality_subjects_list INNER JOIN subjects_list_subjects ON subjects_list_subjects.subjects_list = speciality_subjects_list.subjects_list_id INNER JOIN subjects ON subjects.id = subjects_list_subjects.subjects_id INNER JOIN speciality ON speciality.id = speciality_subjects_list.speciality_id"
    # )
    # universities_db = cursor.fetchall()
    find = False
    for university in universities:
        university_name = university[0]
        for speciality in university[1]:
            speciality_name = speciality[0]
            speciality_subjects = []
            speciality_score = speciality[2]
            speciality_budget = speciality[3]
            speciality_price = speciality[4]
            for subjects in speciality[1]:
                speciality_subjects = subjects
                if set(speciality_subjects).issubset(list(user_scores)):
                    total_score = 0
                    for subject in speciality_subjects:
                        total_score += user_scores[subject]
                    total_score += individual_achievements_value
                    if total_score >= speciality[2]:
                        find = True
                        unpacked_subjects = ", ".join(speciality_subjects)
                        text = f"–ù–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:\n–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {university_name}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞: {speciality_name}\n–ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–¥–∞—á–∏: {unpacked_subjects}\n–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {speciality_score}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: {speciality_budget}\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –æ—Ç: {speciality_price}"
    if not find:
        text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã"
    await message.answer(text, reply_markup=reply_keyboard)


async def start_FSM_for_rating(message: types.Message, state=FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤—É–∑–æ–≤"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await RatingForm.rating.set()
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True, row_width=1
    )
    buttons = [
        "QS World University Rankings ‚Äì 2022",
        "Times Higher Education World University Rankings ‚Äì 2022",
    ]
    keyboard.add(*buttons)
    await message.answer(
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
        reply_markup=keyboard,
    )


async def process_rating_invalid(message: types.Message) -> None:
    """–ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ"""
    return await message.reply(
        "–¢–∞–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É –º–µ–Ω—è –Ω–µ—Ç :(\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: "
    )


async def process_rating(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—É–∑–æ–≤"""
    rng = (
        qs_world_university_rankings_2022
        if message.text == "QS World University Rankings ‚Äì 2022"
        else times_higher_education_world_university_rankings_2022
    )
    answer = f"–†–µ–π—Ç–∏–Ω–≥ {message.text}:\n"
    for rating in rng:
        university_name = rating[0]
        university_global = rating[1]
        university_local = rating[2]
        answer += f"\n\n{university_name} - {university_global} –º–µ—Å—Ç–æ –≤ –ú–∏—Ä–µ, {university_local} –º–µ—Å—Ç–æ –≤ –†–æ—Å—Å–∏–∏"
    await message.answer(
        answer,
        reply_markup=reply_keyboard,
    )


async def process_answers(message: types.Message, state=FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç—ã"""
    async with state.proxy() as data:
        data["number"] = data.setdefault("number", 0) + 1
    current_state = await state.get_state()
    if current_state is None:
        await TestForm.first()
    else:
        await TestForm.next()
    current_state = await state.get_state()
    if current_state == "TestForm:result":
        keyboard = copy.deepcopy(reply_keyboard)
        keyboard.add(types.KeyboardButton("–£–∑–Ω–∞—Ç—å"))
        answer = "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É '–£–∑–Ω–∞—Ç—å'"
        await message.answer(answer, reply_markup=keyboard)
    else:

        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True, row_width=1
        )
        buttons = [
            *questions[data["number"]-1]
        ]
        keyboard.add(*buttons)
        if current_state == "TestForm:answer1_wait":
            await message.answer(
                "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ¬´–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è‚Ä¶¬ª",
                reply_markup=keyboard,
            )
        else:
            await message.answer(
                "–ü—Ä–∏–Ω—è—Ç–æ!\n–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ¬´–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è‚Ä¶¬ª",
                reply_markup=keyboard,
            )


async def start_FSM_for_test(message: types.Message, state=FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞"""
    global answers
    answers = {
        "Nature": 0,
        "Technics": 0,
        "Human": 0,
        "Sign System": 0,
        "Artistic Image": 0,
    }
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç –Ω–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é!\n–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 20 –ø–∞—Ä —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–≤ –æ–±–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã–±–µ—Ä–∏ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é. –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π!\nPS: –î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await process_answers(message, state)


async def process_answer_1(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[0][0]:
        answers["Nature"] += 1
    if message.text == questions[0][1]:
        answers["Technics"] += 1
    await process_answers(message, state)


async def process_answer_2(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[1][0]:
        answers["Human"] += 1
    if message.text == questions[1][1]:
        answers["Sign System"] += 1
    await process_answers(message, state)


async def process_answer_3(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[2][0]:
        answers["Artistic Image"] += 1
    if message.text == questions[2][1]:
        answers["Nature"] += 1
    await process_answers(message, state)


async def process_answer_4(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[3][0]:
        answers["Technics"] += 1
    if message.text == questions[3][1]:
        answers["Human"] += 1
    await process_answers(message, state)


async def process_answer_5(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[4][0]:
        answers["Sign System"] += 1
    if message.text == questions[4][1]:
        answers["Artistic Image"] += 1
    await process_answers(message, state)


async def process_answer_6(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[5][0]:
        answers["Nature"] += 1
    if message.text == questions[5][1]:
        answers["Human"] += 1
    await process_answers(message, state)


async def process_answer_7(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[6][0]:
        answers["Artistic Image"] += 1
    if message.text == questions[6][1]:
        answers["Technics"] += 1
    await process_answers(message, state)


async def process_answer_8(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[7][0]:
        answers["Human"] += 1
    if message.text == questions[7][1]:
        answers["Artistic Image"] += 1
    await process_answers(message, state)


async def process_answer_9(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[8][0]:
        answers["Technics"] += 1
    if message.text == questions[8][1]:
        answers["Sign System"] += 1
    await process_answers(message, state)


async def process_answer_10(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[9][0]:
        answers["Nature"] += 1
    if message.text == questions[9][1]:
        answers["Sign System"] += 1
    await process_answers(message, state)


async def process_answer_11(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[10][0]:
        answers["Nature"] += 1
    if message.text == questions[10][1]:
        answers["Technics"] += 1
    await process_answers(message, state)


async def process_answer_12(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[11][0]:
        answers["Human"] += 1
    if message.text == questions[11][1]:
        answers["Sign System"] += 1
    await process_answers(message, state)


async def process_answer_13(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[12][0]:
        answers["Artistic Image"] += 1
    if message.text == questions[12][1]:
        answers["Nature"] += 1
    await process_answers(message, state)


async def process_answer_14(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[13][0]:
        answers["Technics"] += 1
    if message.text == questions[13][1]:
        answers["Human"] += 1
    await process_answers(message, state)


async def process_answer_15(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[14][0]:
        answers["Sign System"] += 1
    if message.text == questions[14][1]:
        answers["Artistic Image"] += 1
    await process_answers(message, state)


async def process_answer_16(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[15][0]:
        answers["Nature"] += 1
    if message.text == questions[15][1]:
        answers["Human"] += 1
    await process_answers(message, state)


async def process_answer_17(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[16][0]:
        answers["Artistic Image"] += 1
    if message.text == questions[16][1]:
        answers["Technics"] += 1
    await process_answers(message, state)


async def process_answer_18(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[17][0]:
        answers["Human"] += 1
    if message.text == questions[17][1]:
        answers["Artistic Image"] += 1
    await process_answers(message, state)


async def process_answer_19(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[18][0]:
        answers["Technics"] += 1
    if message.text == questions[18][1]:
        answers["Sign System"] += 1
    await process_answers(message, state)


async def process_answer_20(message: types.Message, state=FSMContext) -> None:
    if message.text == questions[19][0]:
        answers["Nature"] += 1
    if message.text == questions[19][1]:
        answers["Sign System"] += 1
    await process_answers(message, state)


async def proccess_test_result(message: types.Message) -> None:
    answer = "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"
    answer += f"–ß–µ–ª–æ–≤–µ–∫ ‚Äî –ø—Ä–∏—Ä–æ–¥–∞ {int((answers['Nature'] * 100)/8)}%\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞ {int((answers['Technics'] * 100)/8)}%\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî —á–µ–ª–æ–≤–µ–∫ {int((answers['Human'] * 100)/8)}%\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî –∑–Ω–∞–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ {int((answers['Sign System'] * 100)/8)}%\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑ {int((answers['Artistic Image'] * 100)/8)}%"
    answer += "\n\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî –ø—Ä–∏—Ä–æ–¥–∞.\n–°—é–¥–∞ –≤—Ö–æ–¥—è—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ–ª–æ–≤–µ–∫ –∏–º–µ–µ—Ç –¥–µ–ª–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏ –Ω–µ–∂–∏–≤–æ–π –∏ –∂–∏–≤–æ–π –ø—Ä–∏—Ä–æ–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä –±–∏–æ–ª–æ–≥, –≥–µ–æ–≥—Ä–∞—Ñ, –≥–µ–æ–ª–æ–≥, –º–∞—Ç–µ–º–∞—Ç–∏–∫, —Ñ–∏–∑–∏–∫, —Ö–∏–º–∏–∫ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ä–∞–∑—Ä—è–¥—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—É–∫."
    answer += "\n\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞.\n–í —ç—Ç—É –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤–∫–ª—é—á–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã —Ç—Ä—É–¥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ–ª–æ–≤–µ–∫  –∏–º–µ–µ—Ç –¥–µ–ª–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π, –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –º–∞—à–∏–Ω–∏—Å—Ç–∞, –º–µ—Ö–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, —Å–≤–∞—Ä—â–∏–∫–∞ –∏ —Ç.–ø."
    answer += "\n\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî —á–µ–ª–æ–≤–µ–∫.\n–°—é–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –≤–∏–¥—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ª—é–¥–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–ª–∏—Ç–∏–∫–∞, —Ä–µ–ª–∏–≥–∏—è, –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –º–µ–¥–∏—Ü–∏–Ω–∞, —Ç–æ—Ä–≥–æ–≤–ª—è, –ø—Ä–∞–≤–æ."
    answer += "\n\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî –∑–Ω–∞–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞.\n–í —ç—Ç—É –≥—Ä—É–ø–ø—É –≤–∫–ª—é—á–µ–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∫–∞—Å–∞—é—â–∏–µ—Å—è —Å–æ–∑–¥–∞–Ω–∏—è, –∏–∑—É—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞, —è–∑—ã–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–ø–æ—Å–æ–±—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∏ —Ç.–ø."
    answer += "\n\n–ß–µ–ª–æ–≤–µ–∫ ‚Äî —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑.\n–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ-—Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Ç—Ä—É–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –º—É–∑—ã–∫–∞, —Ç–µ–∞—Ç—Ä, –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ."
    await message.answer(answer, reply_markup=reply_keyboard)


async def empty(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ—Ç–ª–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã/—Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer(
        "–ù–µ–∏–∑–≤–µ—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n–í–≤–µ–¥–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"
    )


def register_all_handlers(dp: Dispatcher):
    """–†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    dp.register_message_handler(
        send_welcome_message, commands=["start", "help"], state="*"
    )
    dp.register_message_handler(
        start_FSM_for_subject,
        commands="ege",
        state="*",
    )
    dp.register_message_handler(
        start_FSM_for_rating,
        commands="rating",
        state="*",
    )
    dp.register_message_handler(
        start_FSM_for_test,
        commands="test",
        state="*",
    )
    dp.register_message_handler(
        start_FSM_for_subject,
        lambda message: message.text in ["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª–ª–æ–≤ –ï–ì–≠ üßÆ"],
        state="*",
    )
    dp.register_message_handler(
        main_menu,
        commands=["menu"],
        state="*",
    )
    dp.register_message_handler(
        main_menu,
        lambda message: message.text.lower()
        in ["–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–º–µ–Ω—é", "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é üîô", "–Ω–∞–∑–∞–¥"],
        state="*",
    )
    dp.register_message_handler(
        start_FSM_for_subject,
        lambda message: message.text in ["–ó–∞–Ω–æ–≤–æ"],
        state=SubjectScoreForm.amount,
    )
    dp.register_message_handler(
        start_FSM_for_subject,
        lambda message: message.text in ["–ó–∞–Ω–æ–≤–æ"],
        state=SubjectScoreForm.subject,
    )
    dp.register_message_handler(
        start_FSM_for_subject,
        lambda message: message.text in ["–ó–∞–Ω–æ–≤–æ"],
        state=SubjectScoreForm.score,
    )
    dp.register_message_handler(
        start_FSM_for_subject,
        lambda message: message.text in ["–ó–∞–Ω–æ–≤–æ"],
        state=SubjectScoreForm.individual_achievements,
    )
    dp.register_message_handler(
        start_FSM_for_subject,
        lambda message: message.text in ["–ó–∞–Ω–æ–≤–æ"],
        state=SubjectScoreForm.search,
    )
    dp.register_message_handler(
        process_amount_invalid,
        lambda message: not message.text.isdigit() or (
            int(message.text) < 3 or int(message.text) > len(subjects)),
        state=SubjectScoreForm.amount,
    )
    dp.register_message_handler(
        process_amount,
        lambda message: int(message.text) in range(3, len(subjects) + 1),
        state=SubjectScoreForm.amount,
    )
    dp.register_message_handler(
        process_subject_invalid,
        lambda message: message.text not in subjects,
        state=SubjectScoreForm.subject,
    )
    dp.register_message_handler(
        process_subject,
        lambda message: message.text in subjects,
        state=SubjectScoreForm.subject,
    )
    dp.register_message_handler(
        process_score_invalid,
        lambda message: message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" and (
            not message.text.isdigit() or (int(message.text) < 0 or int(message.text) > 100)),
        state=SubjectScoreForm.score,
    )
    dp.register_message_handler(
        process_score,
        lambda message: message.text.isdigit(),
        state=SubjectScoreForm.score,
    )
    dp.register_message_handler(
        process_id_start,
        lambda message: message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        state=SubjectScoreForm.score,
    )
    dp.register_message_handler(
        process_id_invalid,
        lambda message: not message.text.isdigit() or (
            int(message.text) < 0 or int(message.text) > 10),
        state=SubjectScoreForm.individual_achievements,
    )
    dp.register_message_handler(
        process_id,
        lambda message: message.text.isdigit(),
        state=SubjectScoreForm.individual_achievements,
    )
    dp.register_message_handler(
        process_search_start,
        lambda message: message.text in ["–ü–æ–¥–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"],
        state=SubjectScoreForm.search,
    )
    dp.register_message_handler(
        start_FSM_for_rating,
        lambda message: message.text in ["–†–µ–π—Ç–∏–Ω–≥ –≤—É–∑–æ–≤ üîù"],
        state="*",
    )
    dp.register_message_handler(
        start_FSM_for_rating,
        lambda message: message.text in ["–ó–∞–Ω–æ–≤–æ"],
        state=RatingForm.rating,
    )
    dp.register_message_handler(
        process_rating_invalid,
        lambda message: message.text
        not in [
            "QS World University Rankings ‚Äì 2022",
            "Times Higher Education World University Rankings ‚Äì 2022",
        ],
        state=RatingForm.rating,
    )
    dp.register_message_handler(
        process_rating,
        lambda message: message.text
        in [
            "QS World University Rankings ‚Äì 2022",
            "Times Higher Education World University Rankings ‚Äì 2022",
        ],
        state=RatingForm.rating,
    )
    dp.register_message_handler(
        start_FSM_for_test,
        lambda message: message.text in ["–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é ‚ÑπÔ∏è"],
        state="*",
    )
    dp.register_message_handler(
        start_FSM_for_test,
        lambda message: message.text in ["–ó–∞–Ω–æ–≤–æ"],
        state=TestForm.result,
    )
    dp.register_message_handler(
        process_answer_1,
        lambda message: message.text in questions[0],
        state=TestForm.answer1_wait,
    )
    dp.register_message_handler(
        process_answer_2,
        lambda message: message.text in questions[1],
        state=TestForm.answer2_wait,
    )
    dp.register_message_handler(
        process_answer_3,
        lambda message: message.text in questions[2],
        state=TestForm.answer3_wait,
    )
    dp.register_message_handler(
        process_answer_4,
        lambda message: message.text in questions[3],
        state=TestForm.answer4_wait,
    )
    dp.register_message_handler(
        process_answer_5,
        lambda message: message.text in questions[4],
        state=TestForm.answer5_wait,
    )
    dp.register_message_handler(
        process_answer_6,
        lambda message: message.text in questions[5],
        state=TestForm.answer6_wait,
    )
    dp.register_message_handler(
        process_answer_7,
        lambda message: message.text in questions[6],
        state=TestForm.answer7_wait,
    )
    dp.register_message_handler(
        process_answer_8,
        lambda message: message.text in questions[7],
        state=TestForm.answer8_wait,
    )
    dp.register_message_handler(
        process_answer_9,
        lambda message: message.text in questions[8],
        state=TestForm.answer9_wait,
    )
    dp.register_message_handler(
        process_answer_10,
        lambda message: message.text in questions[9],
        state=TestForm.answer10_wait,
    )
    dp.register_message_handler(
        process_answer_11,
        lambda message: message.text in questions[10],
        state=TestForm.answer11_wait,
    )
    dp.register_message_handler(
        process_answer_12,
        lambda message: message.text in questions[11],
        state=TestForm.answer12_wait,
    )
    dp.register_message_handler(
        process_answer_13,
        lambda message: message.text in questions[12],
        state=TestForm.answer13_wait,
    )
    dp.register_message_handler(
        process_answer_14,
        lambda message: message.text in questions[13],
        state=TestForm.answer14_wait,
    )
    dp.register_message_handler(
        process_answer_15,
        lambda message: message.text in questions[14],
        state=TestForm.answer15_wait,
    )
    dp.register_message_handler(
        process_answer_16,
        lambda message: message.text in questions[15],
        state=TestForm.answer16_wait,
    )
    dp.register_message_handler(
        process_answer_17,
        lambda message: message.text in questions[16],
        state=TestForm.answer17_wait,
    )
    dp.register_message_handler(
        process_answer_18,
        lambda message: message.text in questions[17],
        state=TestForm.answer18_wait,
    )
    dp.register_message_handler(
        process_answer_19,
        lambda message: message.text in questions[18],
        state=TestForm.answer19_wait,
    )
    dp.register_message_handler(
        process_answer_20,
        lambda message: message.text in questions[19],
        state=TestForm.answer20_wait,
    )
    dp.register_message_handler(
        proccess_test_result,
        lambda message: message.text in "–£–∑–Ω–∞—Ç—å",
        state=TestForm.result,
    )
    dp.register_message_handler(empty, state="*")


async def main():
    """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    API_TOKEN = "TOKEN"
    storage = MemoryStorage()

    bot = Bot(token=API_TOKEN)
    dp = Dispatcher(bot, storage=storage)
    register_all_handlers(dp)
    await set_commands(bot)
    executor.start_polling(dp, skip_updates=True)
    # connection.close()


if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
